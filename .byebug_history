c
params
{voted: 0, answer_object: Answer.find(params[:id]), av_count: Answer.find(params[:id]).answer_votes.count }.to_json
c
Answer.find(params[:id])
c
@existing_vote.count
@existing_vote.vount
@existing_vote
 @existing_vote = User.find(current_user.id).answer_votes.where(answer_id: params[:id])
c
@existing_vote
c
params
c
params
c
params
c
params
c
params
c
params
c
params
c
params
c
params
c
params
c
params
c
~c
c
@existing_vote.first
@existing_vote
c
params
c
params
c
params
c
@question_vote.question.question_votes.count
@question_vote.question.question_votes
@question_vote.question
@question_vote
c
Question.find(@question_vote.question_id).question_votes.count
Question.find(@question_vote.question_id).question_votes
Question.find(@question_vote.question_id)
Question.find(@question_vote.question_id
c
@question_vote
@question_viote
c
params
c
params
c
params[:question][:id]
params[:question]
params
c
params
c
params
c
params
c
params
c
params
c
params
params[:id]
params
User.find(current_user.id).question_votes.where(question_id: params[:id]).count
c
@question_vote.question
@question_vote.questions
@question_vote.question
@question_vote
c
params
c
@question_votes.first.question
@question_votes.first
@question_votes
c
@question_votes
c
@question_votes
c
QuestionVote.where(question_id: params[:id])c
QuestionVote.where(question_id: params[:id])
@question_votes
c
@question_vote
c
@question_vote
@question
c
@question_vote
c
User.find(current_user.id).question_votes.where(question_id: params[:question_id]).count
c
User.find(current_user.id).question_votes.where(question_id: params[:question_id]).count
params
c
@question_vote
c
@question_vote
c
@question_vote
c
params
c
params
c
params
c
@q
@q = QuestionVote.new
c
params
c
t.strftime('%b %d, %Y at %I:%M %p %Z')c
t.strftime('%b %d, %Y at %I:%M %p %Z')
t.strftime('%b %d, %Y at %I:%M %p')
t.strftime('%b %d, %Y at %I')
t.strftime('%b %d')
t.strftime(
t = @questions.first.created_at
Date.parse(t.to_s).strftime('%b %d, %Y at %I:%M %p')
Date.parse(t.to_s).strftime('%b %d, %Y at %I:%M %p %r')
Date.parse(t.to_s).strftime('%b %d, %Y at %I:%M %p %4')
Date.parse(t.to_s).strftime('%b %d, %Y at %I:%M %p %z')
Date.parse(t.to_s).strftime('%b %d, %Y at %I:%M %p')
Time.utc(t.to_s).strftime('%b %d, %Y at %I:%M %p')
Time.utc(t.to_s).strftime('%b %d, %Y at %I:%M %p %F %R')
Date.parse(t.to_s).strftime('%b %d, %Y at %I:%M %p %F %R')
Date.parse(t.to_s, "+00:00").strftime('%b %d, %Y at %I:%M %p %F %R')
Date.parse(t.to_s).strftime('%b %d, %Y at %I:%M %p %F %R')
t = @questions.first.created_at
c
Date.parse(t.to_s).strftime('%b %d, %Y at %I:%M %p')
Date.parse(t.to_s).strftime('%b %d, %Y %I:%M %p')
Date.parse(t.to_s).strftime('%m %d, %Y %I:%M %p')
Date.parse(t.to_s).strftime('m %m/%d/%Y %I:%M %p')
Date.parse(t.to_s).strftime('%m/%d/%Y %I:%M %p')
Date.parse(t.to_s).strftime('%m/%d/%Y %hh:%mm')
Date.parse(t.to_s).strftime('%m/%d/%Y %h:%m')
Date.parse(t.to_s).strftime('%m/%d/%Y')
Date.parse(t.to_s)
Date.parse(t.to_str)
Date.parse(t)
Time.new(t)
t = @questions.first.created_at
@questions.first.created_at
@questions.first
@questions
c
params
c
current_user
c
@answers.count
@answers
c
@answers
c
@question
c
@question
c
@question
c
@question
c
@new_answer
params
c
@question.answers
@question
c
@new_question
c
@user
c
@user
c
@user
c
params[:user][:fullname]
@user
c
@user
c
params[:id]
params
c
d
c
@user
2user
c
params[:id]
params
c
session[:user_id]
session.user_id
session
params
c
params[:id]
params
c
logged_in?
c
session[:id]
session[:id}
session
logged_in?
c
logged_in?
logged_in
logged_in?
User.logged_in?
c
logged_in?
is_logged?
c
@user.password_hash
@user.password
